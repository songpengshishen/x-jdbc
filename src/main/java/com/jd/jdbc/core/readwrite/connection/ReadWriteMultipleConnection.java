package com.jd.jdbc.core.readwrite.connection;
import com.jd.jdbc.core.readwrite.ds.ReadWriteMultipleDataSource;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.sql.*;

/**
 * Title :主从数据源连接实现
 * Description: 实现JDBC Connection所有方法</br>
 * @author <a href=mailto:wangsongpeng@jd.com>王宋鹏</a>
 * @since 2018/03/28
 */
public class ReadWriteMultipleConnection extends AbstractMasterSlaveConnection{

    private static final Logger log = LoggerFactory.getLogger(ReadWriteMultipleConnection.class);

    /**
     * 读写数据源
     */
    private ReadWriteMultipleDataSource rwDataSource;


    public ReadWriteMultipleConnection(ReadWriteMultipleDataSource dataSource){
           this(dataSource,null,null);
    }

    public ReadWriteMultipleConnection(ReadWriteMultipleDataSource dataSource,String userName,String passWord){
        super(userName,passWord);
        this.rwDataSource = dataSource;
    }

    @Override
    public Connection determineRealConnection(String sql) {

        if(null != targetConnection){
            return targetConnection;
        }

        try {
            if(StringUtils.isBlank(userName) && StringUtils.isBlank(passWord)){
                targetConnection = rwDataSource.determineRealDataSource(sql).getConnection();
            }else{
                targetConnection = rwDataSource.determineRealDataSource(sql).getConnection(userName,passWord);
            }
        }catch (Exception e){
            log.error("determineRealConnection Happen Exception",e);
        }
        return targetConnection;
    }

    @Override
    public Statement createStatement() throws SQLException {
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return determineRealConnection(sql).prepareStatement(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return determineRealConnection(sql).prepareCall(sql);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return determineRealConnection(sql).prepareStatement(sql,resultSetType,resultSetConcurrency);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return determineRealConnection(sql).prepareCall(sql,resultSetType,resultSetConcurrency);
    }


    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return determineRealConnection(sql).prepareStatement(sql,resultSetType,resultSetConcurrency,resultSetHoldability);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return determineRealConnection(sql).prepareCall(sql,resultSetType,resultSetConcurrency,resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return determineRealConnection(sql).prepareStatement(sql,autoGeneratedKeys);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return determineRealConnection(sql).prepareStatement(sql,columnIndexes);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return determineRealConnection(sql).prepareStatement(sql,columnNames);
    }

}
